/*
 * logicmonitor_sdk
 *
 * LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically.
 *
 * API version: 1.0.0
 * Contact: sdk@logicmonitor.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package logicmonitor

import (
"context"
"crypto/hmac"
"crypto/sha256"
"encoding/base64"
"encoding/hex"
"encoding/json"
"fmt"
"net/http"
"strconv"
"strings"
"time"
)

// contextKeys are used to identify the type of value in the context.
// Since these are string, it is possible to get a short description of the
// context key for logging and debugging using key.String().

type contextKey string

func (c contextKey) String() string {
	return "auth " + string(c)
}

var (
	// ContextOAuth2 takes a oauth2.TokenSource as authentication for the request.
	ContextOAuth2 = contextKey("token")

	// ContextBasicAuth takes BasicAuth as authentication for the request.
	ContextBasicAuth = contextKey("basic")

	// ContextAccessToken takes a string oauth2 access token as authentication for the request.
	ContextAccessToken = contextKey("accesstoken")

	// ContextAPIKey takes an APIKey as authentication for the request
	ContextAPIKey = contextKey("apikey")
)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	UserName string `json:"userName,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	ID     string
	Prefix string
}

type Configuration struct {
	BasePath      string            `json:"basePath,omitempty"`
	Host          string            `json:"host,omitempty"`
	Scheme        string            `json:"scheme,omitempty"`
	DefaultHeader map[string]string `json:"defaultHeader,omitempty"`
	UserAgent     string            `json:"userAgent,omitempty"`
	HTTPClient    *http.Client
}

func NewConfiguration() *Configuration {
	cfg := &Configuration{
		BasePath:      "https://localhost/santaba/rest",
		DefaultHeader: make(map[string]string),
		UserAgent:     "Swagger-Codegen/1.0.0/go",
	}
	return cfg
}

func (c *Configuration) GetHmac(ctx context.Context, keys APIKey, ResourcePath string, Method string, Body interface{}) string {
	return c.GetAuthHash(keys, ResourcePath, Method, Body)
}

func (c *Configuration) GetAuthHash(keys APIKey, ResourcePath string, Method string, Body interface{}) string {
	data, err := json.Marshal(Body)
	if err != nil {
		return ""
	}

	if string(data) == "null" {
		data = []byte{}
	}

	authHash := buildAuthHash(keys, Method, string(data), ResourcePath)

	return authHash
}

func buildAuthHash(keys APIKey, method, data, resource string) string {
	now := time.Now()
	nanos := now.UnixNano()
	epoch := strconv.FormatInt(nanos/1000000, 10)

	signature := buildSignature(keys.Key, strings.ToUpper(method), epoch, data, resource)
	auth := fmt.Sprintf("LMv1 %s:%s:%s", keys.ID, signature, epoch)

	return auth
}

func buildSignature(accessKey, method, epoch, data, resource string) string {
	h := hmac.New(sha256.New, []byte(accessKey))
	h.Write([]byte(method + epoch + data + resource))
	hexDigest := hex.EncodeToString(h.Sum(nil))
	signature := base64.StdEncoding.EncodeToString([]byte(hexDigest))

	return signature
}
